<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" href="style.css" />
  <!-- Bootstrap 5 -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous" />
  <!-- Google Fonts -->
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <link href="https://fonts.googleapis.com/css2?family=Anton&family=Asap+Condensed:ital,wght@0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Merriweather:ital,opsz,wght@0,18..144,300..900;1,18..144,300..900&display=swap" rel="stylesheet" />

  <!-- custom javascript for retrieving solunar data -->
  <title>The Keeper App</title>
</head>

<body>
  <div class="container asap-condensed-light gameon" style="color: aliceblue;">
    <h1 style="margin-top: 20px;">Solunar Fishing Forecast</h1>
  </div>
  <!-- Get date for solunar url -->
  <div class="container">
    <div class="container" style="padding: 20px">
      <h3 style="color: aliceblue;">Date:</h3>
      <input type="date" id="myDate" />
    </div>
    <!-- API call for Geoapify using location data -->
    <div class="container">
      <label for="location">
        <h3 style="color: aliceblue;">Location (city or zip code):</h3>
      </label><br />

      <input type="text" id="location" name="location" required minlength="4" maxlength="20" size="20" />
    </div>
    <div class="container">
      <button style="margin-top: 20px; margin-bottom: 20px" type="button" class="btn btn-primary" onclick="fetchAndStoreCoordinates()">
        Get Forecast
      </button>
      <!-- <pre class="forecast-table" id="output"></pre> -->
      <div class="features container" id="output2" style="margin-bottom: 20px;"></div>

    </div>
  </div>
  <div class="features row col-lg-8" style="padding: 20px; margin: auto;">
    <div>
      <h3>About Solar/Lunar Forecasts</h3>
      <img src="./assets/lightning-159507.png" alt="Forecast Icon" style="float: right; width: 300px; height: 300px; padding: 20px;">
      <p>
        Using solunar data to plan a fishing trip can significantly increase your chances of success by aligning your efforts with natural patterns that influence fish behavior. Solunar theory is based on the idea that fish and other wildlife are more active during certain times of the day, particularly when the sun and moon are positioned in ways that affect gravitational pull, light levels, and feeding patterns. Major and minor solunar periods occur daily: major periods typically align with moonrise and moonset, while minor periods happen around the moon being overhead or underfoot. During these times, fish are believed to be more active and more likely to bite, making them prime windows for anglers.
      </p>
    </div>
    <div>
    </div>
  </div>
  </div>
</body>

<script>
  async function fetchAndStoreCoordinates() {
    const apiKey = "e0f78c0e5bcd4339bf2b2bf3f4d39cf4"; // Replace with your Geoapify API key
    const city = document.getElementById("location").value; // Get the city name from the input field
    const url = `https://api.geoapify.com/v1/geocode/search?text=${encodeURIComponent(
    city
  )}&apiKey=${apiKey}`;

    try {
      const response = await fetch(url);
      const data = await response.json();

      // Extract lat and lon from the first result
      const location = data.features[0].geometry.coordinates; // [lon, lat]
      const lon = location[0];
      const lat = location[1];

      // Save to localStorage
      localStorage.setItem("latitude", lat);
      localStorage.setItem("longitude", lon);

      console.log(`Saved to localStorage: lat=${lat}, lon=${lon}`);
    } catch (error) {
      console.error("Error fetching Geoapify data:", error);
    }
    // Get Date Value as yyyymmdd
    const dateInput = document.getElementById("myDate");
    dateInput.addEventListener("change", function() {
      console.log(dateInput.value); // Selected date in YYYY-MM-DD format
    });
    const formattedDate = myDate.value.replace(/-/g, "");
    // Construct the URL for the Solunar API
    const baseUrl = "https://api.solunar.org/solunar/";
    const fullUrl = `${baseUrl}${localStorage.getItem(
    "latitude"
  )},${localStorage.getItem("longitude")},${formattedDate},-5`;
    console.log(fullUrl);

    fetch(fullUrl) // Fetch Solunar data using the constructed URL 
      .then((response) => response.json())
      // .then((_data) => document.getElementById("output").textContent = JSON.stringify(_data, null, 2))
      .then((_data) => rawData = JSON.stringify(_data, null, 2))
      .then((_data) => {
        obj = JSON.parse(_data)
      })
      .then((_data) => {
        document.getElementById("output2").innerHTML =
          "<table><tr><th>Sun Data</th><th></th><th>Moon Data</th><th></th><th>Best Times</th><th></th><th>Overall Day Rating: " + obj.dayRating + "</th></tr><tr><td><strong>Sunrise:</strong></td><td>" + obj.sunRise + "</td><td><strong>Moonrise:</strong></td><td>" + obj.moonRise + "</td><td><strong>Major Time 1:</strong></td><td>" + obj.major1Start + " - " + obj.major1Stop + "</td></tr>" +
          "<tr><td><strong>Highest Sun:</strong></td><td>" + obj.sunTransit + "</td><td><strong>Highest Moon:</strong></td><td>" + obj.moonTransit + "</td><td><strong>Major Time 2: </strong></td><td>" + obj.major2Start + " - " + obj.major2Stop + "</td></tr>" +
          "<tr><td><strong>Sunset:</strong></td><td>" + obj.sunSet + "</td><td><strong>Moonset:</strong></td><td>" + obj.moonSet + "</td><td><strong>Minor Time 1:</strong></td><td>" + obj.minor1Start + " - " + obj.minor1Stop + "</td></tr>" +
          "<tr><td></td><td></td><td><strong>Moonphase:</strong></td><td>" + obj.moonPhase + "</td><td><strong>Minor Time 2</strong></td><td>" + obj.minor2Start + " - " + obj.minor2Stop + "</td></tr>" +
          "<tr><td></td><td></td><td><strong>Moon Illumination:</strong></td><td>" + obj.moonIllumination.toFixed(2) * 100 + "%</td></tr>" +
          "</table>"


      })

      .then((data) => console.log(data))
      .catch((error) => console.error("Error fetching Solunar data:", error));
    document.getElementById("output2").textContent = "Fetching data...";
  }
</script>

</html>